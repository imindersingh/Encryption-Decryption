<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Privacy is an important matter is the realm of the Internet. When sending a message, you want to be sure that no-one but the addressee with the key can read it. The entirety of the modern Web is encrypted - take https for example! Donâ€™t stay behind: hop on the encryption/decryption train and learn the essential basics while implementing this simple project.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/46&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Encryption-Decryption" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="245" />
                <option name="stepId" value="5387" />
                <option name="title" value="Encrypted!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="246" />
                <option name="stepId" value="5388" />
                <option name="title" value="Knowledge is key" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="247" />
                <option name="stepId" value="5389" />
                <option name="title" value="Decrypted!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="248" />
                <option name="stepId" value="5390" />
                <option name="title" value="I command you" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="249" />
                <option name="stepId" value="5391" />
                <option name="title" value="X-files" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="250" />
                <option name="stepId" value="5392" />
                <option name="title" value="Choices, choices" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="Overview of the basic program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="309" />
                      <option name="theoryId" value="5035" />
                      <option name="title" value="Primitive and reference types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="4" />
                      <option name="theoryId" value="3511" />
                      <option name="title" value="Array" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="30" />
                      <option name="theoryId" value="3520" />
                      <option name="title" value="Comments" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="112" />
                      <option name="theoryId" value="3513" />
                      <option name="title" value="Naming variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="113" />
                      <option name="theoryId" value="9055" />
                      <option name="title" value="Scanning the input" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="146" />
                      <option name="theoryId" value="3519" />
                      <option name="title" value="Arithmetic operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="27" />
                      <option name="theoryId" value="3565" />
                      <option name="title" value="Integer types and operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="87" />
                      <option name="theoryId" value="3516" />
                      <option name="title" value="Boolean and logical operations" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="88" />
                      <option name="theoryId" value="3512" />
                      <option name="title" value="Relational operators" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="307" />
                      <option name="theoryId" value="5008" />
                      <option name="title" value="Increment and decrement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="31" />
                      <option name="theoryId" value="3514" />
                      <option name="title" value="Characters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="9" />
                      <option name="theoryId" value="3523" />
                      <option name="title" value="String" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="25" />
                      <option name="theoryId" value="3503" />
                      <option name="title" value="Conditional statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="152" />
                      <option name="theoryId" value="3506" />
                      <option name="title" value="Ternary operator" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="89" />
                      <option name="theoryId" value="3505" />
                      <option name="title" value="The for-loop" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="90" />
                      <option name="theoryId" value="3498" />
                      <option name="title" value="The while and do-while loops" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="19" />
                      <option name="theoryId" value="3507" />
                      <option name="title" value="Branching statements" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="98" />
                      <option name="theoryId" value="3551" />
                      <option name="title" value="Processing strings" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="502" />
                      <option name="theoryId" value="6865" />
                      <option name="title" value="Units of information" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="94" />
                      <option name="theoryId" value="3590" />
                      <option name="title" value="Defining methods" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="872" />
                      <option name="theoryId" value="9704" />
                      <option name="title" value="Introduction to operating systems" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="480" />
                      <option name="theoryId" value="8977" />
                      <option name="title" value="Command line overview" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="876" />
                      <option name="theoryId" value="9746" />
                      <option name="title" value="Parameters and options" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="1" />
                      <option name="theoryId" value="3489" />
                      <option name="title" value="The main method" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="99" />
                      <option name="theoryId" value="3594" />
                      <option name="title" value="Arrays as parameters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="191" />
                      <option name="theoryId" value="3739" />
                      <option name="title" value="Write, compile, and run" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="149" />
                      <option name="theoryId" value="3499" />
                      <option name="title" value="JVM, JRE, and JDK" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="192" />
                      <option name="theoryId" value="3746" />
                      <option name="title" value="Running programs on your computer" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="111" />
                      <option name="theoryId" value="3566" />
                      <option name="title" value="Command-line arguments" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="60" />
                      <option name="theoryId" value="3497" />
                      <option name="title" value="What is an exception" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="59" />
                      <option name="theoryId" value="3570" />
                      <option name="title" value="Hierarchy of exceptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="65" />
                      <option name="theoryId" value="3552" />
                      <option name="title" value="Exception handling" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="172" />
                      <option name="theoryId" value="3635" />
                      <option name="title" value="Files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="173" />
                      <option name="theoryId" value="3636" />
                      <option name="title" value="Reading files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="177" />
                      <option name="theoryId" value="3652" />
                      <option name="title" value="Writing files" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="163" />
                      <option name="theoryId" value="3536" />
                      <option name="title" value="Errors in programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="115" />
                      <option name="theoryId" value="3618" />
                      <option name="title" value="Defining classes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="7" />
                      <option name="theoryId" value="3621" />
                      <option name="title" value="Package" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="17" />
                      <option name="theoryId" value="3535" />
                      <option name="title" value="Constructor" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="96" />
                      <option name="theoryId" value="4727" />
                      <option name="title" value="Objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="116" />
                      <option name="theoryId" value="3495" />
                      <option name="title" value="Instance methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="28" />
                      <option name="theoryId" value="3589" />
                      <option name="title" value="Access modifiers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="24" />
                      <option name="theoryId" value="3599" />
                      <option name="title" value="Getters and setters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="8" />
                      <option name="theoryId" value="3583" />
                      <option name="title" value="Inheritance" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="5">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="159" />
                      <option name="theoryId" value="3556" />
                      <option name="title" value="Strategy" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="160" />
                      <option name="theoryId" value="3577" />
                      <option name="title" value="Encapsulating object creation" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="324" />
                      <option name="theoryId" value="5761" />
                      <option name="title" value="Factory method" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="326" />
                      <option name="theoryId" value="5155" />
                      <option name="title" value="Template method" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="571" />
                      <option name="theoryId" value="7427" />
                      <option name="title" value="Final variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="37" />
                      <option name="theoryId" value="3525" />
                      <option name="title" value="Overloading" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="38" />
                      <option name="theoryId" value="3534" />
                      <option name="title" value="Static members" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="120" />
                      <option name="theoryId" value="3538" />
                      <option name="title" value="Multiple constructors" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="127" />
                      <option name="theoryId" value="3588" />
                      <option name="title" value="The keyword super" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="5" />
                      <option name="theoryId" value="3572" />
                      <option name="title" value="Hiding and overriding" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="491" />
                      <option name="theoryId" value="6692" />
                      <option name="title" value="Protected modifier" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="128" />
                      <option name="theoryId" value="3585" />
                      <option name="title" value="Referencing subclass objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="2" />
                      <option name="theoryId" value="3587" />
                      <option name="title" value="Polymorphism" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="122" />
                      <option name="theoryId" value="3597" />
                      <option name="title" value="Abstract class" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="124" />
                      <option name="theoryId" value="3615" />
                      <option name="title" value="Interface" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="123" />
                      <option name="theoryId" value="3563" />
                      <option name="title" value="Abstract class vs interface" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Privacy is an important matter is the realm of the Internet. When sending a message, you want to be sure that no-one but the addressee with the key can read it. The entirety of the modern Web is encrypted - take https for example! Donâ€™t stay behind: hop on the encryption/decryption train and learn the essential basics while implementing this simple project." />
              <option name="id" value="46" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/209884/additional_files.json" />
              <option name="language" value="java" />
              <option name="templateBased" value="false" />
              <option name="title" value="Encryption-Decryption" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="5" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Encryption-Decryption" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" value="stage1" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Motivation&lt;/h2&gt;&#10;&#10;&lt;p&gt;Today, encryption and decryption algorithms are used everywhere on the Internet to protect our data. This is especially important for sites that handle sensitive data, such as e-commerce sites that accept online card payments and login areas that require users to enter their credentials. To ensure data security, there are complex encryption algorithms behind the scenes.&lt;/p&gt;&#10;&#10;&lt;p&gt;In this project, you will learn how to encrypt and decrypt messages and texts using simple algorithms. We should note that such algorithms are not suitable for industrial use because they can easily be cracked, but these algorithms demonstrate some general ideas about encryption.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt;For the first stage, you need to manually encrypt the message &lt;strong&gt;&quot;we found a treasure!&quot;&lt;/strong&gt; and print only the ciphertext (in lower case).&lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;To encrypt the message, replace each letter with the letter that is in the corresponding position from the end of the English alphabet (aâ†’z, bâ†’y, câ†’x, ... xâ†’c, y â†’b, zâ†’a). Do not replace spaces or the exclamation mark.&lt;/p&gt;&#10;&#10;&lt;p&gt;Use the given template to your program to print the ciphertext instead of the original message.&lt;/p&gt;&#10;&#10;&lt;p&gt;The output should look like &lt;code class=&quot;java&quot;&gt;## ##### # ########!&lt;/code&gt; where &lt;strong&gt;#&lt;/strong&gt; is a lower-case English letter.&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/46/stages/245/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5387" />
                      <option name="index" value="1" />
                      <option name="name" value="Encrypted!" />
                      <option name="record" value="5" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/encryptdecrypt/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/Main.java" />
                                <option name="text" value="package encryptdecrypt;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/EncryptDecryptTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EncryptDecryptTest.java" />
                                <option name="text" value="import encryptdecrypt.Main;&#10;import org.hyperskill.hstest.stage.StageTest;&#10;import org.hyperskill.hstest.testcase.CheckResult;&#10;import org.hyperskill.hstest.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;public class EncryptDecryptTest extends StageTest&lt;String&gt; {&#10;    public EncryptDecryptTest() {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;String&gt;().setAttach(&quot;dv ulfmw z givzhfiv!&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        reply = reply.trim();&#10;        clue = clue.trim();&#10;        boolean isCorrect = reply.trim().equals(clue.trim());&#10;        if (isCorrect) {&#10;            return CheckResult.correct();&#10;        }&#10;        if (reply.length() != clue.length()) {&#10;            return CheckResult.wrong(&#10;                &quot;You should output a line with length &quot; +&#10;                clue.length() + &quot;. &quot; + &quot;You output a &quot; +&#10;                &quot;line with length &quot; + reply.length()&#10;            );&#10;        }&#10;        for (int i = 0; i &lt; clue.length(); i++) {&#10;            if (reply.charAt(i) != clue.charAt(i)) {&#10;                return CheckResult.wrong(&#10;                    &quot;Your &quot; + (i+1) + &quot;-th character '&quot; + reply.charAt(i) + &quot;'&quot; +&#10;                    &quot; is incorrect. The right one is '&quot; + clue.charAt(i) + &quot;'&quot;&#10;                );&#10;            }&#10;        }&#10;        return CheckResult.correct();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage2" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Write a program that reads an English message and an integer number (&lt;strong&gt;key&lt;/strong&gt;) from the standard input and shifts each letter by the specified number according to its order in the alphabet. If you reach the end of the alphabet, start back at the beginning (&lt;strong&gt;a&lt;/strong&gt; follows &lt;strong&gt;z&lt;/strong&gt;).&lt;/p&gt;&#10;&#10;&lt;p&gt;The English alphabet is below:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;abcdefghijklmnopqrstuvwxyz&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;The program should not modify non-letter characters.&lt;/p&gt;&#10;&#10;&lt;p&gt;The key is assumed to mean that if a person knows the value of the key, he or she will be able to decrypt the text, and if he or she does not know, he or she will not be able to decrypt the text. It's like a real key that can open up access to the message text.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt;&lt;strong&gt;Note, &lt;/strong&gt;key is just a special parameter that controls the behavior of our encryption algorithm. See the picture below for more information.&lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;354&quot; src=&quot;https://ucarecdn.com/60ec14dd-7cef-4895-b147-8115e83c533e/&quot; width=&quot;662&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;The encryption process&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;welcome to hyperskill&#10;5&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;bjqhtrj yt mdujwxpnqq&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/46/stages/246/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5388" />
                      <option name="index" value="2" />
                      <option name="name" value="Knowledge is key" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/encryptdecrypt/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/encryptdecrypt/Main.java" />
                                <option name="text" value="package encryptdecrypt;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/EncryptDecryptTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EncryptDecryptTest.java" />
                                <option name="text" value="import encryptdecrypt.Main;&#10;import org.hyperskill.hstest.stage.StageTest;&#10;import org.hyperskill.hstest.testcase.CheckResult;&#10;import org.hyperskill.hstest.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;&#10;class Attach {&#10;    String original;&#10;    int shift;&#10;    String output;&#10;&#10;    public Attach(String original, int shift, String output) {&#10;        this.original = original;&#10;        this.shift = shift;&#10;        this.output = output;&#10;    }&#10;}&#10;&#10;public class EncryptDecryptTest extends StageTest&lt;Attach&gt; {&#10;    public EncryptDecryptTest() {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Attach&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;welcome to hyperskill\n5&quot;)&#10;                .setAttach(new Attach(&#10;                    &quot;welcome to hyperskill&quot;,&#10;                    5,&#10;                    &quot;bjqhtrj yt mdujwxpnqq&quot;)),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;treasure\n10&quot;)&#10;                .setAttach(new Attach(&#10;                    &quot;treasure&quot;,&#10;                    10,&#10;                    &quot;dbokcebo&quot;&#10;                )),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid\n12&quot;)&#10;                .setAttach(new Attach(&#10;                    &quot;qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid&quot;,&#10;                    12,&#10;                    &quot;cphpchdjcijdjibhdjebhjucspucmdmudbnuccup&quot;&#10;                )),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;y\n10&quot;)&#10;                .setAttach(new Attach(&#10;                    &quot;y&quot;,&#10;                    10,&#10;                    &quot;i&quot;&#10;                ))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Attach attach) {&#10;        String clue = attach.output;&#10;        reply = reply.trim();&#10;        clue = clue.trim();&#10;        boolean isCorrect = reply.equals(clue);&#10;        if (isCorrect) {&#10;            return CheckResult.correct();&#10;        }&#10;        if (reply.length() != clue.length()) {&#10;            return CheckResult.wrong(&#10;                &quot;You should output a line with length &quot; +&#10;                    clue.length() + &quot;. &quot; + &quot;You output a &quot; +&#10;                    &quot;line with length &quot; + reply.length()&#10;            );&#10;        }&#10;        for (int i = 0; i &lt; clue.length(); i++) {&#10;            if (reply.charAt(i) != clue.charAt(i)) {&#10;                return CheckResult.wrong(&#10;                    &quot;Your &quot; + (i+1) + &quot;-th character '&quot; + reply.charAt(i) + &quot;'&quot; +&#10;                        &quot; is incorrect. \n&quot; +&#10;                    &quot;The right one is '&quot; + clue.charAt(i) + &quot;'. \n&quot; +&#10;                        &quot;Key is &quot; + attach.shift&#10;                );&#10;            }&#10;        }&#10;        return CheckResult.correct();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage3" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you need to support decryption in your program. The decryption is simply the inverse of encryption, following the same steps but reversing the order in which the keys are applied.&lt;/p&gt;&#10;&#10;&lt;p&gt;Write a program that reads three lines from the standard input: a target operation (&lt;strong&gt;enc&lt;/strong&gt; for encryption, &lt;strong&gt;dec&lt;/strong&gt; for decryption), a message or a cyphertext, and a key to encrypt/decrypt messages. All non-letter characters should be encrypted as well as regular letters. We recommend you to get an integer representation of each character (according to the Unicode table) to shift it.&lt;/p&gt;&#10;&#10;&lt;p&gt;Decompose your program using methods to make it easy to understand and edit later. One method should encrypt a message and another one should decrypt it according to a key.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Encryption input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;enc&#10;Welcome to hyperskill!&#10;5&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Encryption output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Decryption input example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;dec&#10;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&#10;5&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Decryption output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Welcome to hyperskill!&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/46/stages/247/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5389" />
                      <option name="index" value="3" />
                      <option name="name" value="Decrypted!" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/encryptdecrypt/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/encryptdecrypt/Main.java" />
                                <option name="text" value="package encryptdecrypt;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/EncryptDecryptTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EncryptDecryptTest.java" />
                                <option name="text" value="import encryptdecrypt.Main;&#10;import org.hyperskill.hstest.stage.StageTest;&#10;import org.hyperskill.hstest.testcase.SimpleTestCase;&#10;&#10;import java.util.List;&#10;&#10;public class EncryptDecryptTest extends StageTest {&#10;    public EncryptDecryptTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;SimpleTestCase&gt; generate() {&#10;        return List.of(&#10;            new SimpleTestCase(&#10;                &quot;enc\n&quot; +&#10;                    &quot;Welcome to hyperskill!\n&quot; +&#10;                    &quot;5&quot;,&#10;                &quot;\\jqhtrj%yt%m~ujwxpnqq&amp;&quot;),&#10;            new SimpleTestCase(&#10;                &quot;enc\n&quot; +&#10;                    &quot;Hello\n&quot; +&#10;                    &quot;0&quot;,&#10;                &quot;Hello&quot;),&#10;            new SimpleTestCase(&#10;                &quot;enc\n&quot; +&#10;                    &quot;012345678\n&quot; +&#10;                    &quot;1&quot;,&#10;                &quot;123456789&quot;),&#10;            new SimpleTestCase(&#10;                &quot;dec\n&quot; +&#10;                    &quot;\\jqhtrj%yt%m~ujwxpnqq&amp;\n&quot; +&#10;                    &quot;5&quot;,&#10;                &quot;Welcome to hyperskill!&quot;),&#10;            new SimpleTestCase(&#10;                &quot;dec\n&quot; +&#10;                    &quot;Hello\n&quot; +&#10;                    &quot;0&quot;,&#10;                &quot;Hello&quot;),&#10;            new SimpleTestCase(&#10;                &quot;dec\n&quot; +&#10;                    &quot;222233334444\n&quot; +&#10;                    &quot;1&quot;,&#10;                &quot;111122223333&quot;)&#10;        );&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage4" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Modify the previous program to work with command-line arguments instead of the standard input. The program must parse three arguments: &lt;strong&gt;-mode&lt;/strong&gt;, &lt;strong&gt;-key&lt;/strong&gt; and &lt;strong&gt;-data&lt;/strong&gt;. The first argument should determine the programâ€™s mode (&lt;strong&gt;enc&lt;/strong&gt; for encryption, &lt;strong&gt;dec&lt;/strong&gt; for decryption). The second argument is an integer key to modify the message, and the third argument is a text or ciphertext to encrypt or decrypt.&lt;/p&gt;&#10;&#10;&lt;p&gt;All the arguments are guaranteed to be passed to the program. If for some reason it turns out to be wrong:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;&#9;&lt;li&gt;If there is no &lt;strong&gt;-mode&lt;/strong&gt;, the program should work in &lt;strong&gt;enc&lt;/strong&gt; mode.&lt;/li&gt;&#10;&#9;&lt;li&gt;If there is no &lt;strong&gt;-key&lt;/strong&gt;, the program should consider that &lt;strong&gt;key&lt;/strong&gt; = 0.&lt;/li&gt;&#10;&#9;&lt;li&gt;If there is no &lt;strong&gt;-data&lt;/strong&gt;, the program should assume that the &lt;strong&gt;data &lt;/strong&gt;is an empty string.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;Keep in mind that the order of the arguments might be different. For example,&lt;strong&gt; -mode enc&lt;/strong&gt; may be at the end, at the beginning or in the middle of arguments array.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;div class=&quot;alert alert-primary&quot;&gt;Note that to pass an argument that contains spaces as a single argument you need to put it in quotes. So &lt;code class=&quot;java&quot;&gt;&quot;Welcome to hyperskill!&quot;&lt;/code&gt; becomes a single &lt;code class=&quot;java&quot;&gt;Welcome to hyperskill!&lt;/code&gt; argument that doesn't contain quotes. You need quotes to pass this argument in the terminal, but you don't need to remove these quotes in the actual code! In the following examples arguments from the terminal perspective are put in quotes.&lt;/div&gt;&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Run configuration examples for encryption&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -mode enc -key 5 -data &quot;Welcome to hyperskill!&quot;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Encryption output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Run configuration examples for decryption&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -key 5 -data &quot;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&quot; -mode dec&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Decryption output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Welcome to hyperskill!&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/46/stages/248/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5390" />
                      <option name="index" value="4" />
                      <option name="name" value="I command you" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/encryptdecrypt/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/encryptdecrypt/Main.java" />
                                <option name="text" value="package encryptdecrypt;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/EncryptDecryptTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EncryptDecryptTest.java" />
                                <option name="text" value="import encryptdecrypt.Main;&#10;import org.hyperskill.hstest.stage.StageTest;&#10;import org.hyperskill.hstest.testcase.CheckResult;&#10;import org.hyperskill.hstest.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;public class EncryptDecryptTest extends StageTest&lt;String&gt; {&#10;    public EncryptDecryptTest() {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-key&quot;, &quot;5&quot;,&#10;                    &quot;-data&quot;, &quot;Welcome to hyperskill!&quot;&#10;                )&#10;                .setAttach(&quot;\\jqhtrj%yt%m~ujwxpnqq&amp;&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-key&quot;, &quot;0&quot;,&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-data&quot;, &quot;Hello&quot;&#10;                )&#10;                .setAttach(&quot;Hello&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-key&quot;, &quot;1&quot;,&#10;                    &quot;-data&quot;, &quot;012345678&quot;,&#10;                    &quot;-mode&quot;, &quot;enc&quot;&#10;                )&#10;                .setAttach(&quot;123456789&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-data&quot;, &quot;\\jqhtrj%yt%m~ujwxpnqq&amp;&quot;,&#10;                    &quot;-key&quot;, &quot;5&quot;&#10;                )&#10;                .setAttach(&quot;Welcome to hyperskill!&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-key&quot;, &quot;0&quot;,&#10;                    &quot;-data&quot;, &quot;Hi&quot;&#10;                )&#10;                .setAttach(&quot;Hi&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-key&quot;, &quot;1&quot;,&#10;                    &quot;-data&quot;, &quot;222233334444&quot;&#10;                )&#10;                .setAttach(&quot;111122223333&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        return new CheckResult(reply.trim().equals(clue.trim()));&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage5" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;At this stage, you need to add the ability to read and write original and cipher data to files. The program must parse two additional arguments &lt;strong&gt;-in&lt;/strong&gt; and &lt;strong&gt;-out&lt;/strong&gt; to specify the full name of a file to read data and to write the result. Arguments &lt;strong&gt;-mode&lt;/strong&gt;, &lt;strong&gt;-key&lt;/strong&gt;, and &lt;strong&gt;-data&lt;/strong&gt; should still work as before.&lt;/p&gt;&#10;&#10;&lt;p&gt;Your program should read data from &lt;strong&gt;-data&lt;/strong&gt; or from a file written in the &lt;strong&gt;-in&lt;/strong&gt; argument. That's why you can't have both &lt;strong&gt;-data&lt;/strong&gt; and &lt;strong&gt;-in&lt;/strong&gt; arguments simultaneously, only one of them.&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;    &lt;li&gt;If there is no &lt;strong&gt;-mode&lt;/strong&gt;, the program should work in &lt;strong&gt;enc&lt;/strong&gt; mode.&lt;/li&gt;&#10;    &lt;li&gt;If there is no &lt;strong&gt;-key&lt;/strong&gt;, the program should consider that &lt;strong&gt;key&lt;/strong&gt; = 0.&lt;/li&gt;&#10;    &lt;li&gt;If there is no &lt;strong&gt;-data&lt;/strong&gt;, and there is no &lt;strong&gt;-in&lt;/strong&gt; the program should assume that the data is an empty string.&lt;/li&gt;&#10;    &lt;li&gt;If there is no &lt;strong&gt;-out&lt;/strong&gt; argument, the program must print data to the standard output.&lt;/li&gt;&#10;    &lt;li&gt;If there are both &lt;strong&gt;-data&lt;/strong&gt; and &lt;strong&gt;-in&lt;/strong&gt; arguments, your program should prefer &lt;strong&gt;-data&lt;/strong&gt; over &lt;strong&gt;-in&lt;/strong&gt;.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;If there is a non-standard situation (an input file does not exist or an argument doesnâ€™t have a value), the program should not fail. Instead, it must display a clear message about the problem and stop successfully. The message should contain the word &quot;Error&quot; in any case.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -mode enc -in road_to_treasure.txt -out protected.txt -key 5&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;This command must get data from the file &lt;strong&gt;road_to_treasure.txt&lt;/strong&gt;, encrypt the data with the key 5, create a file called &lt;strong&gt;protected.txt&lt;/strong&gt; and write ciphertext to it.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -mode enc -key 5 -data &quot;Welcome to hyperskill!&quot;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 3&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -key 5 -data &quot;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&quot; -mode dec&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Welcome to hyperskill!&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/46/stages/249/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5391" />
                      <option name="index" value="5" />
                      <option name="name" value="X-files" />
                      <option name="record" value="6" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/encryptdecrypt/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/encryptdecrypt/Main.java" />
                                <option name="text" value="package encryptdecrypt;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/EncryptDecryptTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EncryptDecryptTest.java" />
                                <option name="text" value="import encryptdecrypt.Main;&#10;import org.hyperskill.hstest.common.FileUtils;&#10;import org.hyperskill.hstest.stage.StageTest;&#10;import org.hyperskill.hstest.testcase.CheckResult;&#10;import org.hyperskill.hstest.testcase.TestCase;&#10;&#10;import java.io.IOException;&#10;import java.nio.charset.StandardCharsets;&#10;import java.nio.file.Files;&#10;import java.nio.file.NoSuchFileException;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;&#10;public class EncryptDecryptTest extends StageTest&lt;String&gt; {&#10;    public EncryptDecryptTest() {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-key&quot;, &quot;5&quot;,&#10;                    &quot;-in&quot;, &quot;in.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;\\jqhtrj%yt%m~ujwxpnqq&amp;&quot;)&#10;                .addFile(&quot;in.txt&quot;, &quot;Welcome to hyperskill!&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-key&quot;, &quot;0&quot;,&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;Hello&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;Hello&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-key&quot;, &quot;1&quot;,&#10;                    &quot;-in&quot;, &quot;i.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;,&#10;                    &quot;-mode&quot;, &quot;enc&quot;&#10;                )&#10;                .setAttach(&quot;123456789&quot;)&#10;                .addFile(&quot;i.txt&quot;, &quot;012345678&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;,&#10;                    &quot;-key&quot;, &quot;5&quot;&#10;                )&#10;                .setAttach(&quot;Welcome to hyperskill!&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;\\jqhtrj%yt%m~ujwxpnqq&amp;&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-key&quot;, &quot;0&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;Hi&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;Hi&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-key&quot;, &quot;1&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;111122223333&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;222233334444&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        String fileName = &quot;output.txt&quot;;&#10;        String output;&#10;&#10;        try {&#10;            Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);&#10;            output = Files.readString(path, StandardCharsets.UTF_8);&#10;        } catch (NoSuchFileException e) {&#10;            return new CheckResult(false, &quot;File output.txt not found!&quot;);&#10;        } catch (IOException e) {&#10;            return new CheckResult(false, &quot;Cannot read from file!&quot;);&#10;        }&#10;&#10;        if (!output.trim().equals(clue.trim())) {&#10;            return new CheckResult(false, &quot;Wrong result in the file!&quot;);&#10;        }&#10;&#10;        return new CheckResult(true);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" value="stage6" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Extend your program by adding different algorithms to encode/decode data. The first one would be shifting algorithm (it shifts each letter by the specified number according to its order in the alphabet in circle). The second one would be based on Unicode table, like in the previous stage.&lt;/p&gt;&#10;&#10;&lt;p&gt;When starting the program, the necessary algorithm should be specified by an argument (&lt;strong&gt;-alg&lt;/strong&gt;). The first algorithm should be named &lt;strong&gt;shift&lt;/strong&gt;, the second one should be named &lt;strong&gt;unicode&lt;/strong&gt;. If there is no &lt;strong&gt;-alg&lt;/strong&gt; you should default it to &lt;strong&gt;shift&lt;/strong&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember that in case of &lt;strong&gt;shift&lt;/strong&gt; algorithm you need to encode only English letters (from 'a' to 'z' as the first circle and from 'A' to 'Z' as the second circle i.e. after 'z' comes 'a' and after 'Z&quot; comes 'A').&lt;/p&gt;&#10;&#10;&lt;p&gt;To complete this stage, we recommend that you create a set of classes and interfaces for encryption and decryption algorithms.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -mode enc -in road_to_treasure.txt -out protected.txt -key 5 -alg unicode&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;This command must get data from the file &lt;strong&gt;road_to_treasure.txt&lt;/strong&gt;, encrypt the data with the key 5, create a file called &lt;strong&gt;protected.txt&lt;/strong&gt; and write ciphertext to it.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -mode enc -key 5 -data &quot;Welcome to hyperskill!&quot; -alg unicode&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 3&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -key 5 -alg unicode -data &quot;\jqhtrj%yt%m~ujwxpnqq&amp;amp;&quot; -mode dec&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Welcome to hyperskill!&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -key 5 -alg shift -data &quot;Welcome to hyperskill!&quot; -mode enc&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Bjqhtrj yt mdujwxpnqq!&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example 5:&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Input:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main -key 5 -alg shift -data &quot;Bjqhtrj yt mdujwxpnqq!&quot; -mode dec&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Output:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Welcome to hyperskill!&lt;/code&gt;&lt;/pre&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/46/stages/250/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5392" />
                      <option name="index" value="6" />
                      <option name="name" value="Choices, choices" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/encryptdecrypt/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/Main.java" />
                                <option name="text" value="package encryptdecrypt;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/EncryptDecryptTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/EncryptDecryptTest.java" />
                                <option name="text" value="import encryptdecrypt.Main;&#10;import org.hyperskill.hstest.common.FileUtils;&#10;import org.hyperskill.hstest.stage.StageTest;&#10;import org.hyperskill.hstest.testcase.CheckResult;&#10;import org.hyperskill.hstest.testcase.TestCase;&#10;&#10;import java.io.IOException;&#10;import java.nio.charset.StandardCharsets;&#10;import java.nio.file.Files;&#10;import java.nio.file.NoSuchFileException;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;&#10;public class EncryptDecryptTest extends StageTest&lt;String&gt; {&#10;    public EncryptDecryptTest() {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;String&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-alg&quot;, &quot;unicode&quot;,&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-key&quot;, &quot;5&quot;,&#10;                    &quot;-in&quot;, &quot;in.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;\\jqhtrj%yt%m~ujwxpnqq&amp;&quot;)&#10;                .addFile(&quot;in.txt&quot;, &quot;Welcome to hyperskill!&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-key&quot;, &quot;0&quot;,&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-alg&quot;, &quot;unicode&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;Hello&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;Hello&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-key&quot;, &quot;1&quot;,&#10;                    &quot;-in&quot;, &quot;i.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;unicode&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;,&#10;                    &quot;-mode&quot;, &quot;enc&quot;&#10;                )&#10;                .setAttach(&quot;123456789&quot;)&#10;                .addFile(&quot;i.txt&quot;, &quot;012345678&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;unicode&quot;,&#10;                    &quot;-key&quot;, &quot;5&quot;&#10;                )&#10;                .setAttach(&quot;Welcome to hyperskill!&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;\\jqhtrj%yt%m~ujwxpnqq&amp;&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-alg&quot;, &quot;unicode&quot;,&#10;                    &quot;-key&quot;, &quot;0&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;Hi&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;Hi&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-key&quot;, &quot;1&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;unicode&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;111122223333&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;222233334444&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-key&quot;, &quot;5&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;shift&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;bjqhtrj yt mdujwxpnqq&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;welcome to hyperskill&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-key&quot;, &quot;10&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;shift&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;treasure&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;dbokcebo&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-key&quot;, &quot;12&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;shift&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;cphpchdjcijdjibhdjebhjucspucmdmudbnuccup&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;dec&quot;,&#10;                    &quot;-key&quot;, &quot;10&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;shift&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;y&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;i&quot;),&#10;&#10;            new TestCase&lt;String&gt;()&#10;                .addArguments(&#10;                    &quot;-mode&quot;, &quot;enc&quot;,&#10;                    &quot;-key&quot;, &quot;10&quot;,&#10;                    &quot;-in&quot;, &quot;input.txt&quot;,&#10;                    &quot;-alg&quot;, &quot;shift&quot;,&#10;                    &quot;-out&quot;, &quot;output.txt&quot;&#10;                )&#10;                .setAttach(&quot;i&quot;)&#10;                .addFile(&quot;input.txt&quot;, &quot;y&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, String clue) {&#10;        String fileName = &quot;output.txt&quot;;&#10;        String output;&#10;&#10;        try {&#10;            Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);&#10;            output = Files.readString(path, StandardCharsets.UTF_8);&#10;        } catch (NoSuchFileException e) {&#10;            return new CheckResult(false, &quot;File output.txt not found!&quot;);&#10;        } catch (IOException e) {&#10;            return new CheckResult(false, &quot;Cannot read from file!&quot;);&#10;        }&#10;&#10;        if (!output.trim().equals(clue.trim())) {&#10;            return new CheckResult(false, &quot;Wrong result in the file!&quot;);&#10;        }&#10;&#10;        return new CheckResult(true);&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="output.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="output.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/AlgorithmStrategy.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/AlgorithmStrategy.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/EncryptShift.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/EncryptShift.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/DecryptShift.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/DecryptShift.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/EncryptUnicode.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/EncryptUnicode.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/DecryptUnicode.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/DecryptUnicode.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/Context.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/Context.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/Argument.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/Argument.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/encryptdecrypt/FileReader.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/encryptdecrypt/FileReader.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="Problems" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The sequence&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2231&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that prints a part of the sequence 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (the number is repeated as many times, to what it equals to). The input to the program is a positive integer n: the number of the elements of the sequence the program should print. Output the sequence of numbers, written in a single line, space-separated.&lt;/p&gt; &#10;  &lt;p&gt;For example, if n = 7, then the program should output 1 2 2 3 3 3 4.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;7&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 2 2 3 3 3 4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3507&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2231" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2231" />
                      <option name="index" value="1" />
                      <option name="name" value="The sequence" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The (un)-ordered sequence&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2734&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads a sequence of integer numbers and outputs &lt;strong&gt;true&lt;/strong&gt; if the sequence is ordered (in ascending or descending order), otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;div class=&quot;alert alert-primary&quot;&gt;&#10;   Keep in mind, if a number has the same value as the following number, it does not break the order.&#10;  &lt;/div&gt;&#10;  &lt;p&gt;&lt;/p&gt; &#10;  &lt;p&gt;The sequence ends with 0. Do not consider this number as a part of the sequence. The sequence always has at least one number (excluding 0).&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;9 8 7 6 5 4 3 2 1 0&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;true&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2 3 3 9 0&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;true&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2 5 5 2 3 0&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;false&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3507&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2734" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2734" />
                      <option name="index" value="2" />
                      <option name="name" value="The (un)-ordered sequence" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The integer barrier&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2731&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads a sequence of integer numbers in a loop and adds up all numbers. If a new number is equal to 0, the program must stop the loop and output the accumulated sum. When the sum is equal or exceeded &lt;strong&gt;1000 (the barrier)&lt;/strong&gt;, the program should also stop and output the value equal to &lt;strong&gt;sum â€“ 1000&lt;/strong&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Note, the input can contain extra numbers. Just ignore them.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;800&lt;br&gt;101&lt;br&gt;102&lt;br&gt;300&lt;br&gt;0&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;103&lt;br&gt;105&lt;br&gt;109&lt;br&gt;0&lt;br&gt;1000&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;317&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3507&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2731" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2731" />
                      <option name="index" value="3" />
                      <option name="name" value="The integer barrier" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;In a box&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2951&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You are given a class named &lt;code class=&quot;java&quot;&gt;Box&lt;/code&gt; that has three double fields.&lt;/p&gt; &#10;  &lt;p&gt;Create an instance method to calculate the volume of the box. The method must be named &lt;code class=&quot;java&quot;&gt;getVolume&lt;/code&gt;. It should take no arguments and return a double result.&lt;/p&gt; &#10;  &lt;p&gt;Do not make the fields and method &lt;code class=&quot;java&quot;&gt;private&lt;/code&gt;!&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3495&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2951" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2951" />
                      <option name="index" value="4" />
                      <option name="name" value="In a box" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Box {&#10;&#10;    double height;&#10;    double width;&#10;    double length;&#10;&#10;    // write a method here&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Complex numbers&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2952&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Jake wants to write a program that works with &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Complex_number&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;complex numbers&lt;/a&gt;. He created a class &lt;code class=&quot;language-java&quot;&gt;Complex&lt;/code&gt; that represents a complex number with its real and imaginary parts. Now he needs instance methods so that he can calculate the sum and difference of two complex numbers.&lt;/p&gt; &#10;  &lt;p&gt;Help Jake and create two instance methods for his class:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;code class=&quot;language-java&quot;&gt;add(Complex num)&lt;/code&gt; that takes another complex number as an argument and adds its corresponding fields to the current instance;&lt;/li&gt; &#10;   &lt;li&gt;&lt;code class=&quot;language-java&quot;&gt;subtract(Complex num)&lt;/code&gt; that takes another complex number as an argument and subtracts its corresponding fields from the current instance;&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Both methods should return nothing.&lt;/p&gt; &#10;  &lt;p&gt;Do not make the fields and methods &lt;code class=&quot;language-java&quot;&gt;private&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Let's consider the example for &lt;code class=&quot;language-java&quot;&gt;add&lt;/code&gt; method. If &lt;code class=&quot;language-java&quot;&gt;number = 10 + 4i&lt;/code&gt; and &lt;code class=&quot;language-java&quot;&gt;anotherNumber = 6 + 6i&lt;/code&gt;, applying method &lt;code class=&quot;language-java&quot;&gt;add&lt;/code&gt; to &lt;code class=&quot;language-java&quot;&gt;number&lt;/code&gt; with argument &lt;code class=&quot;language-java&quot;&gt;anotherNumber&lt;/code&gt; changes number to &lt;code class=&quot;language-java&quot;&gt;number = 16 + 10i&lt;/code&gt; &lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Complex number = new Complex();&#10;number.real = 10;&#10;number.image = 4;&#10;// math expression of number = 10.0 + 4.0i&#10;Complex anotherNumber = new Complex();&#10;anotherNumber.real = 6;&#10;anotherNumber.image = 6;&#10;// math expression of anotherNumber = 6.0 + 6.0i&#10;number.add(anotherNumber); // number = 16.0 + 10.0i&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3495&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2952" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2952" />
                      <option name="index" value="5" />
                      <option name="name" value="Complex numbers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Complex {&#10;&#10;    double real;&#10;    double image;&#10;&#10;    // write methods here&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Simulating a clock&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2989&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You are given a class &lt;code class=&quot;language-java&quot;&gt;Clock&lt;/code&gt;. It has two int fields: &lt;code class=&quot;language-java&quot;&gt;hours&lt;/code&gt; and &lt;code class=&quot;language-java&quot;&gt;minutes&lt;/code&gt;. The clock has a minute scale from 0 to 59 and an hour scale from 1 to 12. The clock does not know whether it's day or night (no AM or PM).&lt;/p&gt; &#10;  &lt;p&gt;Implement the method &lt;code class=&quot;language-java&quot;&gt;next&lt;/code&gt; that increases the value of minutes by 1. The minutes must be reset to zero when the current hour ends. Do not forget to change the hours as well.&lt;/p&gt; &#10;  &lt;p&gt;Do not make the fields and methods &lt;code class=&quot;language-java&quot;&gt;private&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Let's consider the examples.&lt;/p&gt; &#10;  &lt;p&gt;1) The initial time of a &lt;code class=&quot;language-java&quot;&gt;clock&lt;/code&gt;object is 12:00, i.e. &lt;code class=&quot;language-java&quot;&gt;hours = 12&lt;/code&gt; and &lt;code class=&quot;language-java&quot;&gt;minutes = 0&lt;/code&gt;. Applying method &lt;code class=&quot;language-java&quot;&gt;next&lt;/code&gt; to the &lt;code class=&quot;language-java&quot;&gt;clock&lt;/code&gt; changes its field &lt;code class=&quot;language-java&quot;&gt;minutes&lt;/code&gt; to &lt;code class=&quot;language-java&quot;&gt;minutes = 1&lt;/code&gt;. In this way, time is 12:01.&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Clock clock = new Clock(); // time is 12:00&#10;clock.next(); // time is 12:01&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt; 2) The initial time of a &lt;code class=&quot;language-java&quot;&gt;clock&lt;/code&gt; object is 10:59, i.e. &lt;code class=&quot;language-java&quot;&gt;hours = 10&lt;/code&gt; and &lt;code class=&quot;language-java&quot;&gt;minutes = 59&lt;/code&gt;. After applying method &lt;code class=&quot;language-java&quot;&gt;next&lt;/code&gt; to the &lt;code class=&quot;language-java&quot;&gt;clock&lt;/code&gt; its fields look like &lt;code class=&quot;language-java&quot;&gt;hours = 11&lt;/code&gt; and &lt;code class=&quot;language-java&quot;&gt;minutes = 0&lt;/code&gt;, i.e. time is 11:00 now.&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Clock clock = new Clock();&#10;clock.hours = 10;&#10;clock.minutes = 59;&#10;// time is 10:59&#10;clock.next(); // time is 11:00&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt; &lt;/p&gt; &#10;  &lt;p&gt;Here is an example of a clock you are supposed to imitate.&lt;/p&gt; &#10;  &lt;p&gt; &lt;/p&gt; &#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;201px&quot; src=&quot;https://ucarecdn.com/f62bb626-cc70-4dbd-a7f2-145418cc74c7/&quot; width=&quot;202px&quot;&gt;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3495&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2989" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2989" />
                      <option name="index" value="6" />
                      <option name="name" value="Simulating a clock" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Clock {&#10;&#10;    int hours = 12;&#10;    int minutes = 0;&#10;&#10;    void next() {&#10;        // implement me&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Shape hierarchy&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2120&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You have an abstract class &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Shape&lt;/code&gt;&lt;/strong&gt; with two abstract methods: &lt;code class=&quot;java&quot;&gt;getPerimeter()&lt;/code&gt;and &lt;code class=&quot;java&quot;&gt;getArea()&lt;/code&gt;. See the provided code template.&lt;/p&gt; &#10;  &lt;p&gt;You need to declare and implement three classes: &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Triangle&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Rectangle&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code class=&quot;java&quot;&gt;Circle&lt;/code&gt;&lt;/strong&gt;. The classes must extend the &lt;code class=&quot;java&quot;&gt;Shape&lt;/code&gt; class and implement all abstract methods. To implement the methods the standard class &lt;code class=&quot;java&quot;&gt;Math&lt;/code&gt; may help you.&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;The class &lt;code class=&quot;java&quot;&gt;Triangle&lt;/code&gt; must have a constructor with three double arguments for setting the length of each side. To calculate the area of this shape you may use the Heron's formula.&lt;/li&gt; &#10;   &lt;li&gt;The class &lt;code class=&quot;java&quot;&gt;Rectangle&lt;/code&gt; must have a constructor with two double arguments for setting the length of different sides.&lt;/li&gt; &#10;   &lt;li&gt;The class &lt;code class=&quot;java&quot;&gt;Circle&lt;/code&gt; must have a constructor with one double argument for setting the radius. You may use &lt;code class=&quot;java&quot;&gt;Math.PI&lt;/code&gt; as the PI constant or you can declare it yourself.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Note: do NOT make your classes &lt;code class=&quot;java&quot;&gt;public&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;A circle has a radius = 10: perimeter = 62.831853..., area = 314.159265....&lt;/p&gt; &#10;  &lt;p&gt;A triangle has three sides a = 3, b = 4 and c = 5: perimeter = 12.0, area = 6.0.&lt;/p&gt; &#10;  &lt;p&gt;A rectangle has two different sides a = 5, b = 10: perimeter = 30.0, area = 50.0.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3597&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2120" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2120" />
                      <option name="index" value="7" />
                      <option name="name" value="Shape hierarchy" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="abstract class Shape {&#10;&#10;    abstract double getPerimeter();&#10;&#10;    abstract double getArea();&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Division&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/10991&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;To perform math division, you have the method named &lt;code class=&quot;java&quot;&gt;divide&lt;/code&gt; that takes two long numbers and returns a double value.&lt;/p&gt; &#10;  &lt;p&gt;Write a body of the method. It should return the result of the division of the first argument by the second one. It's guaranteed that the second argument is not equal to zero.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;500000000000 200000000000&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2.5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/10982&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/10991" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="10991" />
                      <option name="index" value="8" />
                      <option name="name" value="Division" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;public class Main {&#10;&#10;    public static double divide(long a, long b) {&#10;        // write your code here&#10;    }&#10;&#10;    /* Do not change code below */&#10;    public static void main(String[] args) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;        final long a = scanner.nextLong();&#10;        final long b = scanner.nextLong();&#10;        System.out.println(divide(a, b));&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Clock factory&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3324&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;There is a hierarchy of clocks with the base interface &lt;code class=&quot;java&quot;&gt;Clock&lt;/code&gt; and the class &lt;code class=&quot;java&quot;&gt;ClockFactory&lt;/code&gt; to produce instances.&lt;/p&gt; &#10;  &lt;p&gt;Implement the method &lt;code class=&quot;java&quot;&gt;produce&lt;/code&gt; of the factory. It should return a clock according to the specified type string:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&quot;SAND&quot; is for &lt;code class=&quot;java&quot;&gt;SandClock&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;&quot;DIGITAL&quot; is for &lt;code class=&quot;java&quot;&gt;DigitalClock&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;&quot;MECH&quot; is for &lt;code class=&quot;java&quot;&gt;MechanicalClock&lt;/code&gt;.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;The single constructor of the factory takes the boolean parameter &lt;code class=&quot;java&quot;&gt;produceToyClock&lt;/code&gt;. It determines what the factory does when an unsuitable type of clock is passed. If it is &lt;code class=&quot;java&quot;&gt;true&lt;/code&gt;, the factory should produce an instance of &lt;code class=&quot;java&quot;&gt;ToyClock&lt;/code&gt;, otherwise, return &lt;code class=&quot;java&quot;&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Do not change the provided code of the clock classes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3577&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3324" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3324" />
                      <option name="index" value="9" />
                      <option name="name" value="Clock factory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class ClockFactory {&#10;&#10;    private boolean produceToyClock;&#10;&#10;    public ClockFactory(boolean produceToyClock) {&#10;        this.produceToyClock = produceToyClock;&#10;    }&#10;&#10;    /**&#10;     * It produces a clock according to a specified type: SAND, DIGITAL or MECH.&#10;     * If some other type is passed, the method produces ToyClock.&#10;     */&#10;    public Clock produce(String type) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;interface Clock {&#10;&#10;    void tick();&#10;}&#10;&#10;class SandClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...sand noise...&quot;);&#10;    }&#10;}&#10;&#10;class DigitalClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...pim...&quot;);&#10;    }&#10;}&#10;&#10;class MechanicalClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...clang mechanism...&quot;);&#10;    }&#10;}&#10;&#10;class ToyClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...tick...&quot;);&#10;    }&#10;}&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;        final String type = scanner.next();&#10;        final boolean produceToy = scanner.nextBoolean();&#10;        final ClockFactory factory = new ClockFactory(produceToy);&#10;        final Clock clock = factory.produce(type);&#10;        if (clock == null) {&#10;            System.out.println(clock);&#10;        } else {&#10;            clock.tick();&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Motor static factory&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3325&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;In the very heart of suburbia, there stood a motor factory; in the very heart of that factory worked a programmer. Implement the static method &lt;code class=&quot;java&quot;&gt;make&lt;/code&gt; of the &lt;code class=&quot;java&quot;&gt;MotorStaticFactory&lt;/code&gt; that produces motors of different types. The method takes three parameters: the &lt;code class=&quot;java&quot;&gt;type&lt;/code&gt; of a motor as a character, &lt;code class=&quot;java&quot;&gt;model&lt;/code&gt; as a string, and &lt;code class=&quot;java&quot;&gt;power&lt;/code&gt; as a long number. It should return a new motor according to the &lt;code class=&quot;java&quot;&gt;type&lt;/code&gt; with initialized fields.&lt;/p&gt; &#10;  &lt;p&gt;Here is the correspondence between the passed type and the class of the motor: &lt;code class=&quot;java&quot;&gt;'P'&lt;/code&gt; for pneumatic, &lt;code class=&quot;java&quot;&gt;'H'&lt;/code&gt; for hydraulic, &lt;code class=&quot;java&quot;&gt;'E'&lt;/code&gt; for electric and &lt;code class=&quot;java&quot;&gt;'W'&lt;/code&gt; for warp. Ignore the upper/lower case when creating motors, i.e. &lt;code class=&quot;java&quot;&gt;'p'&lt;/code&gt; must work as well as &lt;code class=&quot;java&quot;&gt;'P'&lt;/code&gt;. If an invalid character is given, the method should return &lt;code class=&quot;java&quot;&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Do not change the provided code of the motor classes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3577&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3325" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3325" />
                      <option name="index" value="10" />
                      <option name="name" value="Motor static factory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class MotorStaticFactory {&#10;&#10;    /**&#10;     * It returns an initialized motor according to the specified type by the first character:&#10;     * 'P' or 'p' - pneumatic, 'H' or 'h' - hydraulic, 'E' or 'e' - electric, 'W' or 'w' - warp.&#10;     */&#10;    public static Motor make(char type, String model, long power) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;class Motor {&#10;&#10;    String model;&#10;    long power;&#10;&#10;    public Motor(String model, long power) {&#10;        this.model = model;&#10;        this.power = power;&#10;    }&#10;}&#10;&#10;class PneumaticMotor extends Motor {&#10;&#10;    public PneumaticMotor(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;class HydraulicMotor extends Motor {&#10;&#10;    public HydraulicMotor(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;class ElectricMotor extends Motor {&#10;&#10;    public ElectricMotor(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;class WarpDrive extends Motor {&#10;&#10;    public WarpDrive(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;        final char type = scanner.next().charAt(0);&#10;        final String model = scanner.next();&#10;        final long power = scanner.nextLong();&#10;        final Motor motor = MotorStaticFactory.make(type, model, power);&#10;        if (motor == null) {&#10;            System.out.println(motor);&#10;        } else {&#10;            System.out.println(motor.getClass().getName() + &quot; &quot; + motor.model + &quot; &quot; + motor.power);&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Static factory methods for Time&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3328&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The normal way to create an instance of a class is to use a public constructor of the class. But there is another technique. A class can provide a public static factory method that returns an instance of the class. An advantage of static factory methods is that they have names that make the code easier to read.&lt;/p&gt; &#10;  &lt;p&gt;In this problem, you have the class &lt;code class=&quot;language-java&quot;&gt;Time&lt;/code&gt; containing three fields: &lt;code class=&quot;language-java&quot;&gt;hour&lt;/code&gt;, &lt;code class=&quot;language-java&quot;&gt;minute&lt;/code&gt; and &lt;code class=&quot;language-java&quot;&gt;second&lt;/code&gt;. Implement the following static factory methods of this class:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;code class=&quot;language-java&quot;&gt;noon()&lt;/code&gt; returns an instance initialized with 12 hours, 0 minutes, and 0 seconds.&lt;/li&gt; &#10;   &lt;li&gt;&lt;code class=&quot;language-java&quot;&gt;midnight()&lt;/code&gt; returns an instance initialized with 0 hours, 0 minutes, and 0 seconds.&lt;/li&gt; &#10;   &lt;li&gt;&lt;code class=&quot;language-java&quot;&gt;of(int hour, int minute, int second)&lt;/code&gt; returns an instance initialized with passed hour, minute and second if the passed arguments are correct (hour: 0-23, minute: 0-59, seconds: 0-59), otherwise, &lt;code class=&quot;language-java&quot;&gt;null&lt;/code&gt;.&lt;/li&gt; &#10;   &lt;li&gt;&lt;code class=&quot;language-java&quot;&gt;ofSeconds(long seconds)&lt;/code&gt; returns an instance initialized with seconds passed since midnight; as an example, the invocation &lt;code class=&quot;language-java&quot;&gt;Time.ofSeconds(500000)&lt;/code&gt; must create an instance with 18 hours, 53 minutes and 20 seconds (days are skipped);&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;As you see, the methods are more readable than the same constructors. If you want to create an instance of &lt;code class=&quot;language-java&quot;&gt;Time&lt;/code&gt; representing noon, you can write:&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Time noon = Time.noon();&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt;Note:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;do not change fields of the class &lt;code class=&quot;language-java&quot;&gt;Time&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;in a real application, it may be better to throw an exception than return &lt;code class=&quot;language-java&quot;&gt;null&lt;/code&gt; when arguments are incorrect.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;You must not read or output something in this problem. Just implement the static factory methods.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;noon&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;12 0 0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;midnight&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0 0 0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3577&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3328" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3328" />
                      <option name="index" value="11" />
                      <option name="name" value="Static factory methods for Time" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class Time {&#10;&#10;    int hour;&#10;    int minute;&#10;    int second;&#10;&#10;    public static Time noon() {&#10;        // write your code here&#10;    }&#10;&#10;    public static Time midnight() {&#10;        // write your code here&#10;    }&#10;&#10;    public static Time ofSeconds(long seconds) {&#10;        // write your code here&#10;    }&#10;&#10;    public static Time of(int hour, int minute, int second) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;public class Main {&#10;&#10;    public static void main(String[] args) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;&#10;        final String type = scanner.next();&#10;        Time time = null;&#10;&#10;        switch (type) {&#10;            case &quot;noon&quot;:&#10;                time = Time.noon();&#10;                break;&#10;            case &quot;midnight&quot;:&#10;                time = Time.midnight();&#10;                break;&#10;            case &quot;hms&quot;:&#10;                int h = scanner.nextInt();&#10;                int m = scanner.nextInt();&#10;                int s = scanner.nextInt();&#10;                time = Time.of(h, m, s);&#10;                break;&#10;            case &quot;seconds&quot;:&#10;                time = Time.ofSeconds(scanner.nextInt());&#10;                break;&#10;            default:&#10;                time = null;&#10;                break;&#10;        }&#10;&#10;        if (time == null) {&#10;            System.out.println(time);&#10;        } else {&#10;            System.out.println(String.format(&quot;%s %s %s&quot;, time.hour, time.minute, time.second));&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Clocks&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5767&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given classes are the &lt;code class=&quot;java&quot;&gt;Clock&lt;/code&gt; interface of products, specified clocks, and the factory class &lt;code class=&quot;java&quot;&gt;ClockFactory&lt;/code&gt; to produce instances.&lt;/p&gt; &#10;  &lt;p&gt;Your task is to implement the factory method &lt;code class=&quot;java&quot;&gt;produce&lt;/code&gt;. It should return a clock according to the specified type string:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&quot;Sand&quot; â€” &lt;code class=&quot;java&quot;&gt;SandClock&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;&quot;Digital&quot; â€” &lt;code class=&quot;java&quot;&gt;DigitalClock&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;&quot;Mechanical&quot; â€” &lt;code class=&quot;java&quot;&gt;MechanicalClock&lt;/code&gt;.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Please, do not change the provided code of the clock classes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Digital&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;...pim...&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5761&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5767" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5767" />
                      <option name="index" value="12" />
                      <option name="name" value="Clocks" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;/* Product - Clock */&#10;interface Clock {&#10;    void tick();&#10;}&#10;&#10;/* Concrete Product - Sand Clock */&#10;class SandClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...sand noise...&quot;);&#10;    }&#10;}&#10;&#10;/* Concrete Product - Digital Clock */&#10;class DigitalClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...pim...&quot;);&#10;    }&#10;}&#10;&#10;/* Concrete Product - Mechanical Clock */&#10;class MechanicalClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...clang mechanism...&quot;);&#10;    }&#10;}&#10;&#10;class ClockFactory {&#10;&#10;    /* It produces concrete clocks corresponding their types : Digital, Sand or Mechanical */&#10;    public Clock produce(String type) {&#10;        // write your code here ...&#10;    }&#10;}&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;        final String type = scanner.next();&#10;        final ClockFactory clockFactory = new ClockFactory();&#10;        final Clock clock = clockFactory.produce(type);&#10;        clock.tick();&#10;        scanner.close();&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Robot&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5764&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt; The given classes are components of the&lt;strong&gt; Factory Method &lt;/strong&gt;pattern.&lt;/p&gt; &#10;  &lt;p&gt;&lt;code class=&quot;java&quot;&gt;Robot&lt;/code&gt; is the product and &lt;code class=&quot;java&quot;&gt;RobotCleaner&lt;/code&gt; is the concrete product.&lt;/p&gt; &#10;  &lt;p&gt;Implement a factory method in &lt;code class=&quot;java&quot;&gt;RobotFactory&lt;/code&gt; methods to create &lt;code class=&quot;java&quot;&gt;RobotCleaner&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Please, do not change the provided code of the classes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;RAS012&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;cleaner-robot: {&lt;br&gt;&#9;name : RAS012&lt;br&gt;&#9;description : Robot will clean my room and dry my socks&lt;br&gt;&#9;power : 100&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5761&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5764" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5764" />
                      <option name="index" value="13" />
                      <option name="name" value="Robot" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner; &#10;&#10;/** Product */&#10;abstract class Robot {&#10;&#10;    public abstract String getName();&#10;    public abstract String getDescription();&#10;    public abstract int getPower();&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;robot: {\n\t&quot; +&#10;                   &quot;name : &quot; + getName() + &quot;\n\t&quot; + &#10;                   &quot;description : &quot; + getDescription() + &quot;\n\t&quot; + &#10;                    &quot;power : &quot; + getPower() + &quot;\n}&quot;;&#10;    }&#10;}&#10;&#10;/** Type of product - Robot Type */&#10;enum RobotType {&#10;    ROBOT_CLEANER   &#10;}&#10;&#10;/** Concrete Product - Robot Cleaner */&#10;class RobotCleaner extends Robot {&#10;&#10;    private String name;&#10;    private String description;&#10;    private int power;&#10;&#10;    public RobotCleaner(String name, String description, int power) {&#10;        this.name = name;&#10;        this.description = description;&#10;        this.power = power;&#10;    }&#10;&#10;    @Override&#10;    public String getName() {&#10;        return this.name;&#10;    }&#10;&#10;    @Override&#10;    public String getDescription() {&#10;        return this.description;&#10;    }&#10;&#10;    @Override&#10;    public int getPower() {&#10;        return this.power;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;cleaner-&quot; + super.toString();&#10;    }&#10;&#10;}&#10;&#10;/** Factory  */&#10;class RobotFactory {&#10;&#10;    /** Factory Method **/&#10;    public Robot getRobot(RobotType type, String name, String description, int power) {&#10;        /** write your code here ... */&#10;    }&#10;}&#10;&#10;/** Factory Demo */&#10;class RobotDemo {&#10;    public static void main(String[] args) {&#10;&#10;        RobotFactory robotFactory = new RobotFactory();  &#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        String nameCleaner = scanner.nextLine();&#10;&#10;        Robot robotCleaner = robotFactory.&#10;            getRobot(&#10;                RobotType.ROBOT_CLEANER,&#10;                nameCleaner,&#10;                &quot;Robot will clean my room and dry my socks&quot;,&#10;                100);&#10;&#10;        System.out.println(robotCleaner);&#10;&#10;        scanner.close();&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Motors&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5768&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;A lovely idea befalls you: you decide to automate the production of motors.&lt;/p&gt; &#10;  &lt;p&gt;You have 4 types of motors: electric, hydraulic, pneumatic and warp drive.&lt;/p&gt; &#10;  &lt;p&gt;You must implement &lt;code class=&quot;java&quot;&gt;MotorFactory&lt;/code&gt; and the specified classes of motors.&lt;/p&gt; &#10;  &lt;p&gt;Please, do not change the provided code of the motor classes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;E&lt;br&gt;R-45&lt;br&gt;1000&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Electric motor={model:R-45,power:1000}&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5761&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5768" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5768" />
                      <option name="index" value="14" />
                      <option name="name" value="Motors" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;/* Product - Motor */&#10;abstract class Motor {&#10;&#10;    String model;&#10;    long power;&#10;&#10;    public Motor(String model, long power) {&#10;        this.model = model;&#10;        this.power = power;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;motor={model:&quot; + model + &quot;,power:&quot; + power + &quot;}&quot;;&#10;    }&#10;}&#10;&#10;class PneumaticMotor extends Motor {&#10;    // write your code here ...&#10;}&#10;&#10;class HydraulicMotor extends Motor {&#10;    // write your code here ...&#10;}&#10;&#10;class ElectricMotor extends Motor {&#10;    // write your code here ...&#10;}&#10;&#10;class WarpDrive extends Motor {&#10;    // write your code here ...&#10;}&#10;&#10;class MotorFactory {&#10;&#10;    /**&#10;     * It returns an initialized motor according to the specified type by the first character:&#10;     * 'P' or 'p' - pneumatic, 'H' or 'h' - hydraulic, 'E' or 'e' - electric, 'W' or 'w' - warp.&#10;     */&#10;    public static Motor make(char type, String model, long power) {&#10;        // write your code here ...&#10;    }&#10;}&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;        final char type = scanner.next().charAt(0);     &#10;        final String model = scanner.next();&#10;        final long power = scanner.nextLong();&#10;        // write your code here ...&#10;        scanner.close();&#10;       System.out.println(motor);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>